name: Add Project to README

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to approve and process'
        required: true
        type: number

permissions:
  contents: write
  pull-requests: write

jobs:
  add-project:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch issue form data
        id: issue
        run: |
          ISSUE_NUMBER=${{ github.event.inputs.issue_number }}
          echo "Fetching issue #$ISSUE_NUMBER"
          ISSUE_BODY=$(gh issue view $ISSUE_NUMBER --json body -q '.body')
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "$ISSUE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse issue fields
        id: parse
        run: |
          NAME=$(echo "$ISSUE_BODY" | grep -A1 "Project Name" | tail -n1 | xargs)
          REPO=$(echo "$ISSUE_BODY" | grep -A1 "Repository URL" | tail -n1 | xargs)
          WEBSITE=$(echo "$ISSUE_BODY" | grep -A1 "Project Website URL" | tail -n1 | xargs)
          DESC=$(echo "$ISSUE_BODY" | grep -A1 "Short Description" | tail -n1 | xargs)
          CATEGORY=$(echo "$ISSUE_BODY" | grep -A1 "Category" | tail -n1 | xargs)
          echo "NAME=$NAME" >> $GITHUB_ENV
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "WEBSITE=$WEBSITE" >> $GITHUB_ENV
          echo "DESC=$DESC" >> $GITHUB_ENV
          echo "CATEGORY=$CATEGORY" >> $GITHUB_ENV

      - name: Update README
        run: |
          python3 - <<'PY'
          import re
          from pathlib import Path

          readme = Path("README.md")
          text = readme.read_text(encoding="utf-8") if readme.exists() else ""

          name = "${{ env.NAME }}"
          repo = "${{ env.REPO }}"
          website = "${{ env.WEBSITE }}"
          desc = "${{ env.DESC }}"
          category = "${{ env.CATEGORY }}" or "Other"

          website_md = f"[{website}]({website})" if website else "â€”"
          row = f"| {name} | [Repo]({repo}) | {website_md} | {desc} |"

          lines = text.splitlines()
          # Find existing category table
          cat_header_pattern = re.compile(rf"##\s*{re.escape(category)}", re.I)
          header_idx = next((i for i, l in enumerate(lines) if cat_header_pattern.match(l)), None)

          if header_idx is not None:
              # Find table header
              table_header_idx = next((i for i in range(header_idx+1, len(lines))
                                       if re.search(r"\|\s*Name\s*\|.*\|\s*Repo\s*\|", lines[i])), None)
              if table_header_idx is not None:
                  # Check if project already exists
                  if any(name in l for l in lines[table_header_idx+2:]):
                      print(f"Project '{name}' already exists in category '{category}'. Skipping insert.")
                  else:
                      # Insert row after table header separator
                      lines.insert(table_header_idx + 2, row)
              else:
                  # Table header not found, create it
                  insert_at = header_idx + 1
                  block = [
                      "",
                      "| Name | Repo | Website | Description |",
                      "|------|------|---------|-------------|",
                      row
                  ]
                  for offset, l in enumerate(block):
                      lines.insert(insert_at + offset, l)
          else:
              # Category not found, create new section + table
              if lines and lines[-1].strip() != "":
                  lines.append("")
              lines.append(f"## {category}")
              lines.append("")
              lines.append("| Name | Repo | Website | Description |")
              lines.append("|------|------|---------|-------------|")
              lines.append(row)

          readme.write_text("\n".join(lines)+"\n", encoding="utf-8")
          print(f"Inserted project '{name}' into category '{category}'")
          PY

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          branch: ${{ format('add-project-{0}', github.event.inputs.issue_number) }}
          title: "Add project: ${{ env.NAME }}"
          body: ${{ format('This PR adds a new project from issue #{0}', github.event.inputs.issue_number) }}
          commit-message: "Add project: ${{ env.NAME }}"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge PR
        uses: pascalgn/automerge-action@v0.15.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          merge_method: squash
