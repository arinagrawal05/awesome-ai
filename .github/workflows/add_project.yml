name: Add Project from Issue

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  restrict-and-add-project:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Define allowed and restricted labels
      - name: Define label rules
        run: |
          echo "RESTRICTED=approved,security,release-ready" >> $GITHUB_ENV
          echo "ALLOWED=bug,question,help wanted,enhancement,Music,Video,Chatbot" >> $GITHUB_ENV
          echo "MAINTAINERS=arinagrawal05" >> $GITHUB_ENV

      # Enforce label restrictions
      - name: Enforce label restrictions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABEL="${{ github.event.label.name }}"
          SENDER="${{ github.event.sender.login }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          IFS=',' read -ra RESTRICTED_ARRAY <<< "$RESTRICTED"
          IFS=',' read -ra ALLOWED_ARRAY <<< "$ALLOWED"
          IFS=',' read -ra MAINTAINERS_ARRAY <<< "$MAINTAINERS"

          if [[ " ${RESTRICTED_ARRAY[*]} " =~ " $LABEL " ]] && [[ ! " ${MAINTAINERS_ARRAY[*]} " =~ " $SENDER " ]]; then
            echo "Restricted label '$LABEL' added by non-maintainer. Removing..."
            gh issue edit $ISSUE_NUMBER --remove-label "$LABEL"
            gh issue comment $ISSUE_NUMBER --body "Hi @$SENDER, the label '$LABEL' is restricted to maintainers and has been removed."
            exit 0
          fi

          if [[ ! " ${RESTRICTED_ARRAY[*]} " =~ " $LABEL " ]] && [[ ! " ${ALLOWED_ARRAY[*]} " =~ " $LABEL " ]]; then
            echo "Label '$LABEL' is not allowed. Removing..."
            gh issue edit $ISSUE_NUMBER --remove-label "$LABEL"
            gh issue comment $ISSUE_NUMBER --body "Hi @$SENDER, the label '$LABEL' is not allowed and has been removed."
            exit 0
          fi

      # Extract project info (regex based, case-insensitive)
      - name: Extract project info
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        id: extract
        run: |
          ISSUE_BODY=$(gh issue view ${{ github.event.issue.number }} --json body -q '.body')
          export ISSUE_BODY

          python3 - <<'PY'
import os, re

body = os.environ.get("ISSUE_BODY", "")

def extract(pattern, default=""):
    m = re.search(pattern, body, re.I)
    return m.group(1).strip() if m else default

name = extract(r"Project Name[:\s]*([\s\S]*?)(?:\n|$)")
repo = extract(r"Repository URL[:\s]*([^\s]+)")
website = extract(r"Project Website URL[:\s]*([^\s]+)")
desc = extract(r"Short Description[:\s]*([\s\S]*?)(?:\n|$)")
category = extract(r"Category[:\s]*([\w\s]+)", "Other")

# Normalize category: capitalize first letter of each word
category = category.strip().title()

with open(os.environ["GITHUB_ENV"], "a") as f:
    f.write(f"NAME={name}\n")
    f.write(f"REPO={repo}\n")
    f.write(f"WEBSITE={website}\n")
    f.write(f"DESC={desc}\n")
    f.write(f"CATEGORY={category}\n")

print("Extracted project info:")
print("Name:", name)
print("Repo:", repo)
print("Website:", website)
print("Desc:", desc)
print("Category:", category)
          PY

      # Update README with extracted info
      - name: Update README
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        run: |
          python3 - <<'PY'
import re
from pathlib import Path
import os

readme = Path("README.md")
text = readme.read_text(encoding="utf-8") if readme.exists() else ""

name = os.environ["NAME"]
repo = os.environ["REPO"]
website = os.environ["WEBSITE"]
desc = os.environ["DESC"]
category = os.environ.get("CATEGORY") or "Other"

website_md = f"[{website}]({website})" if website else "â€”"
row = f"| {name} | [Repo]({repo}) | {website_md} | {desc} |"

lines = text.splitlines()

# Find category header (case-insensitive)
cat_header_pattern = re.compile(rf"##\s*{re.escape(category)}", re.I)
header_idx = next((i for i, l in enumerate(lines) if cat_header_pattern.match(l)), None)

if header_idx is not None:
    # Find table header below category header
    table_header_idx = next(
        (i for i in range(header_idx+1, len(lines))
         if re.search(r"\|\s*name\s*\|.*\|\s*repo\s*\|", lines[i], re.I)),
        None
    )
    if table_header_idx is not None:
        # Check if project already exists
        if any(re.search(rf"\|\s*{re.escape(name)}\s*\|", l, re.I) for l in lines[table_header_idx+2:]):
            print(f"Project '{name}' already exists in '{category}'. Skipping insert.")
        else:
            lines.insert(table_header_idx + 2, row)
    else:
        # No table exists yet under this category â†’ create one
        insert_at = header_idx + 1
        block = [
            "",
            "| Name | Repo | Website | Description |",
            "|------|------|---------|-------------|",
            row
        ]
        for offset, l in enumerate(block):
            lines.insert(insert_at + offset, l)
else:
    # Category section doesn't exist â†’ create it
    if lines and lines[-1].strip() != "":
        lines.append("")
    lines.append(f"## {category}")
    lines.append("")
    lines.append("| Name | Repo | Website | Description |")
    lines.append("|------|------|---------|-------------|")
    lines.append(row)

readme.write_text("\n".join(lines) + "\n", encoding="utf-8")
print(f"Inserted project '{name}' into '{category}'")
          PY

      # Create Pull Request
      - name: Create Pull Request
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          branch: add-project-${{ github.event.issue.number }}
          title: 'Add project'
          body: 'This PR adds a new project from issue #${{ github.event.issue.number }}'
          commit-message: "Add project: ${{ env.NAME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-branch: true

      # Merge PR, delete branch, and close issue
      - name: Merge PR, delete branch, and close issue
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        env:
          GH_TOKEN: ${{ secrets.MERGE_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --state open --head add-project-${{ github.event.issue.number }} --json number -q '.[0].number')
          if [ "$PR_NUMBER" != "null" ] && [ -n "$PR_NUMBER" ]; then
            echo "Merging PR #$PR_NUMBER..."
            gh pr merge $PR_NUMBER --squash --admin --delete-branch
            gh issue comment ${{ github.event.issue.number }} --body "Project added, PR merged, branch deleted. ðŸŽ‰"
            gh issue close ${{ github.event.issue.number }}
          else
            echo "No open PR found for add-project-${{ github.event.issue.number }}"
