name: Auto Add Project to README

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  restrict-and-add-project:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        uses: cli/gh-action@v2
        
      - name: Define label rules
        run: |
          echo "RESTRICTED=approved,security,release-ready" >> $GITHUB_ENV
          echo "ALLOWED=bug,question,help wanted,enhancement,Music,Video,Chatbot" >> $GITHUB_ENV
          echo "MAINTAINERS=your-username1,your-username2" >> $GITHUB_ENV

      - name: Enforce label restrictions
        run: |
          LABEL="${GITHUB_EVENT_LABEL_NAME}"
          SENDER="${GITHUB_EVENT_SENDER_LOGIN}"
          ISSUE_NUMBER="${GITHUB_EVENT_ISSUE_NUMBER}"

          IFS=',' read -ra RESTRICTED_ARRAY <<< "$RESTRICTED"
          IFS=',' read -ra ALLOWED_ARRAY <<< "$ALLOWED"
          IFS=',' read -ra MAINTAINERS_ARRAY <<< "$MAINTAINERS"

          if [[ " ${RESTRICTED_ARRAY[*]} " =~ " $LABEL " ]] && [[ ! " ${MAINTAINERS_ARRAY[*]} " =~ " $SENDER " ]]; then
            echo "Restricted label '$LABEL' added by non-maintainer. Removing..."
            gh issue remove-label $ISSUE_NUMBER "$LABEL"
            gh issue comment $ISSUE_NUMBER --body "Hi @$SENDER, the label '$LABEL' is restricted to maintainers and has been removed."
            exit 0
          fi

          if [[ ! " ${RESTRICTED_ARRAY[*]} " =~ " $LABEL " ]] && [[ ! " ${ALLOWED_ARRAY[*]} " =~ " $LABEL " ]]; then
            echo "Label '$LABEL' is not allowed. Removing..."
            gh issue remove-label $ISSUE_NUMBER "$LABEL"
            gh issue comment $ISSUE_NUMBER --body "Hi @$SENDER, the label '$LABEL' is not allowed and has been removed."
            exit 0
          fi

      - name: Process project if approved
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        run: |
          echo "Approved label added by maintainer. Processing project..."

          ISSUE_BODY=$(gh issue view ${{ github.event.issue.number }} --json body -q '.body')

          NAME=$(echo "$ISSUE_BODY" | grep -A1 "Project Name" | tail -n1 | xargs)
          REPO=$(echo "$ISSUE_BODY" | grep -A1 "Repository URL" | tail -n1 | xargs)
          WEBSITE=$(echo "$ISSUE_BODY" | grep -A1 "Project Website URL" | tail -n1 | xargs)
          DESC=$(echo "$ISSUE_BODY" | grep -A1 "Short Description" | tail -n1 | xargs)
          CATEGORY=$(echo "$ISSUE_BODY" | grep -A1 "Category" | tail -n1 | xargs)

          python3 - <<'PY'
          import re
          from pathlib import Path

          readme = Path("README.md")
          text = readme.read_text(encoding="utf-8") if readme.exists() else ""

          import os
          name = os.environ["NAME"]
          repo = os.environ["REPO"]
          website = os.environ["WEBSITE"]
          desc = os.environ["DESC"]
          category = os.environ["CATEGORY"] or "Other"
          website_md = f"[{website}]({website})" if website else "â€”"
          row = f"| {name} | [Repo]({repo}) | {website_md} | {desc} |"

          lines = text.splitlines()
          cat_header_pattern = re.compile(rf"##\s*{re.escape(category)}", re.I)
          header_idx = next((i for i, l in enumerate(lines) if cat_header_pattern.match(l)), None)

          if header_idx is not None:
              table_header_idx = next((i for i in range(header_idx+1, len(lines))
                                       if re.search(r"\|\s*Name\s*\|.*\|\s*Repo\s*\|", lines[i])), None)
              if table_header_idx is not None:
                  if any(name in l for l in lines[table_header_idx+2:]):
                      print(f"Project '{name}' already exists in '{category}'. Skipping insert.")
                  else:
                      lines.insert(table_header_idx + 2, row)
              else:
                  insert_at = header_idx + 1
                  block = [
                      "",
                      "| Name | Repo | Website | Description |",
                      "|------|------|---------|-------------|",
                      row
                  ]
                  for offset, l in enumerate(block):
                      lines.insert(insert_at + offset, l)
          else:
              if lines and lines[-1].strip() != "":
                  lines.append("")
              lines.append(f"## {category}")
              lines.append("")
              lines.append("| Name | Repo | Website | Description |")
              lines.append("|------|------|---------|-------------|")
              lines.append(row)

          readme.write_text("\n".join(lines)+"\n", encoding="utf-8")
          print(f"Inserted project '{name}' into '{category}'")
          PY

      - name: Create Pull Request
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          branch: add-project-${{ github.event.issue.number }}
          title: Add project
          body: This PR adds a new project from issue #${{ github.event.issue.number }}
          commit-message: "Add project: $NAME"
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-branch: true

      - name: Auto-merge PR with MERGE_TOKEN
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        uses: pascalgn/automerge-action@v0.15.0
        with:
          github_token: ${{ secrets.MERGE_TOKEN }}
          merge_method: squash

      - name: Close issue and comment
        if: ${{ github.event.label.name == 'approved' && contains(env.MAINTAINERS, github.event.sender.login) }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          gh issue comment $ISSUE_NUMBER --body "Project has been added, PR merged automatically, and branch deleted. ðŸŽ‰"
          gh issue close $ISSUE_NUMBER
